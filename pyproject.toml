[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ascii-cinema"
version = "1.0.0"
description = "Convert images and videos to beautiful ASCII art animations"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "ASCII Cinema Team", email = "ascii@cinema.dev"}
]
keywords = ["ascii", "art", "video", "image", "terminal", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Video",
]

dependencies = [
    "typer>=0.12.0",
    "rich>=13.7.0",
    "Pillow>=10.3.0",
    "numpy>=1.26.0",
]

[project.optional-dependencies]
video = [
    "opencv-python>=4.9.0",
]
dev = [
    "pytest>=8.1.0",
    "pytest-cov>=5.0.0",
    "black>=24.3.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
]

[project.urls]
Homepage = "https://github.com/ascii-cinema/ascii-cinema"
Documentation = "https://github.com/ascii-cinema/ascii-cinema#readme"
Repository = "https://github.com/ascii-cinema/ascii-cinema"

[project.scripts]
ascii-cinema = "ascii_cinema.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["ascii_cinema*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--cov=ascii_cinema",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["ascii_cinema"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = false
